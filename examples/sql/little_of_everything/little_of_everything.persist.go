// This file is generated by protoc-gen-persist 
// Source File: examples/sql/little_of_everything/little_of_everything.proto
// DO NOT EDIT !
package little_of_everything
import(
fmt "fmt"
sql "database/sql"
io "io"
strings "strings"
context "golang.org/x/net/context"
grpc "google.golang.org/grpc"
codes "google.golang.org/grpc/codes"
mytime "github.com/tcncloud/protoc-gen-persist/examples/mytime"
little_of_everything "github.com/tcncloud/protoc-gen-persist/examples/sql/little_of_everything"
test "github.com/tcncloud/protoc-gen-persist/examples/test"
)
type ExampleService1Impl struct {
	SqlDB *sql.DB
}
func NewExampleService1Impl(driver, connString string) (*ExampleService1Impl, error) {
	db, err := sql.Open(driver, connString)
	if err != nil {
		return nil, err
	}
	return &ExampleService1Impl{ SqlDB: db }, nil
}
 
// sql unary UnaryExample1
func (s* ExampleService1Impl) UnaryExample1 (ctx context.Context, req *ExampleTable1) (*ExampleTable1, error) {
	var (
		
		BytesField []byte
		InnerEnum int32
		InnerMessage little_of_everything.ExampleTable1_InnerMessage
		Key string
		StartTime mytime.MyTime
		StringArray []string
		TableId int32
		TestField test.Test
		Value string
		err error
	)
	
	
	
	
	
		
	
	err = s.SqlDB.QueryRow("SELECT id AS "table_id", key, value, msg as inner_message, status as inner_enum FROM test_table WHERE id = $1" ,req.TableId,mytime.MyTime{}.ToSql(req.StartTime)).
		Scan( &TableId, &Key, &Value, &InnerMessage, &InnerEnum, &StringArray, &BytesField, &StartTime, &TestField,)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, grpc.Errorf(codes.NotFound, "%+v doesn't exist", req)
		} else if strings.Contains(err.Error(), "duplicate key") {
			return nil, grpc.Errorf(codes.AlreadyExists, "%+v already exists", req)
		}
		return nil, grpc.Errorf(codes.Unknown, err.Error())
	}
	res := ExampleTable1{
	
	BytesField: BytesField,
	InnerEnum: little_of_everything.ExampleTable1_InnerEnum(InnerEnum),
	InnerMessage: &InnerMessage,
	Key: Key,
	StartTime: StartTime.ToProto(),
	StringArray: StringArray,
	TableId: TableId,
	TestField: &TestField,
	Value: Value,
	}
	
	
	
	
		
	
	return &res, nil
}
 
 
// sql unary UnaryExample2
func (s* ExampleService1Impl) UnaryExample2 (ctx context.Context, req *test.Test) (*ExampleTable1, error) {
	var (
		
		BytesField []byte
		InnerEnum int32
		InnerMessage little_of_everything.ExampleTable1_InnerMessage
		Key string
		StartTime mytime.MyTime
		StringArray []string
		TableId int32
		TestField test.Test
		Value string
		err error
	)
	
	
	
	
	
		
	
	err = s.SqlDB.QueryRow("SELECT id AS "table_id", key, value, msg as inner_message, status as inner_enum FROM test_table WHERE id = $1" ,req.Id).
		Scan( &TableId, &Key, &Value, &InnerMessage, &InnerEnum, &StringArray, &BytesField, &StartTime, &TestField,)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, grpc.Errorf(codes.NotFound, "%+v doesn't exist", req)
		} else if strings.Contains(err.Error(), "duplicate key") {
			return nil, grpc.Errorf(codes.AlreadyExists, "%+v already exists", req)
		}
		return nil, grpc.Errorf(codes.Unknown, err.Error())
	}
	res := ExampleTable1{
	
	BytesField: BytesField,
	InnerEnum: little_of_everything.ExampleTable1_InnerEnum(InnerEnum),
	InnerMessage: &InnerMessage,
	Key: Key,
	StartTime: StartTime.ToProto(),
	StringArray: StringArray,
	TableId: TableId,
	TestField: &TestField,
	Value: Value,
	}
	
	
	
	
		
	
	return &res, nil
}
 
 
// sql server streaming ServerStreamSelect
func (s *ExampleService1Impl) ServerStreamSelect(req *ExampleTable1, stream ExampleService1_ServerStreamSelectServer) error {
	var (
 
 BytesField []byte
 InnerEnum int32
 InnerMessage little_of_everything.ExampleTable1_InnerMessage
 Key string
 StartTime mytime.MyTime
 StringArray []string
 TableId int32
 TestField test.Test
 Value string
 	err error
 	)
	
	
	
	
	
		
	
	rows, err := s.SqlDB.Query("SELECT id AS "table_id", key, value, msg as inner_message, status as inner_enum FROM test_table WHERE id = $1" ,req.TableId)
	if err != nil {
		return grpc.Errorf(codes.Unknown, err.Error())
	}
	defer rows.Close()
	for rows.Next() {
		err = rows.Err()
		if err != nil {
			if err == sql.ErrNoRows {
				return grpc.Errorf(codes.NotFound, "%+v doesn't exist", req)
			} else if strings.Contains(err.Error(), "duplicate key") {
				return grpc.Errorf(codes.AlreadyExists, "%+v already exists", req)
			}
			return grpc.Errorf(codes.Unknown, err.Error())
		}
		err := rows.Scan( &TableId, &Key, &Value, &InnerMessage, &InnerEnum, &StringArray, &BytesField, &StartTime, &TestField,)
		if err != nil {
			return grpc.Errorf(codes.Unknown, err.Error())
		}
		res := ExampleTable1{
		
		BytesField: BytesField,
		InnerEnum: little_of_everything.ExampleTable1_InnerEnum(InnerEnum),
		InnerMessage: &InnerMessage,
		Key: Key,
		StartTime: StartTime.ToProto(),
		StringArray: StringArray,
		TableId: TableId,
		TestField: &TestField,
		Value: Value,
		}
		
	
	
	
		
	
		stream.Send(&res)
	}
	return nil
}
 
 
// sql client streaming ClientStreamingExample
func (s *ExampleService1Impl) ClientStreamingExample(stream ExampleService1_ClientStreamingExampleServer) error {
	var err error
	tx, err := s.SqlDB.Begin()
	if err != nil {
		return err
	}
	stmt, err:= tx.Prepare("SELECT id AS "table_id", key, value, msg as inner_message, status as inner_enum FROM test_table WHERE id = $1")
	if err != nil {
		return err
	}
	
	res := CountRows{}
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			tx.Rollback()
			return grpc.Errorf(codes.Unknown, err.Error())
		}
		
	
	
	
	
		
			
				beforeRes, err := little_of_everything.ClientStreamingExampleBefore(req)
			
			if err != nil {
				
					tx.Rollback()
					return grpc.Errorf(codes.Unknown, err.Error())
				
			}
			if beforeRes != nil {
				
					continue
				
				
				
				
			}
		
	
		_, err = stmt.Exec(req.TableId)
		if err != nil {
			tx.Rollback()
			if err == sql.ErrNoRows {
				return grpc.Errorf(codes.NotFound, "%+v doesn't exist", req)
			} else if strings.Contains(err.Error(), "duplicate key") {
				return grpc.Errorf(codes.AlreadyExists, "%+v already exists", req)
			}
			return grpc.Errorf(codes.Unknown, err.Error())
		}
		
	
	
	
		
			
				err = little_of_everything.ClientStreamingExampleAfter(req, &res)
			
			if err != nil {
				
					tx.Rollback()
					return grpc.Errorf(codes.Unknown, err.Error())
				
			}
		
	
	}
	err = tx.Commit()
	if err != nil {
		fmt.Println("Commiting transaction failed, rolling back...")
		return grpc.Errorf(codes.Unknown, err.Error())
	}
	stream.SendAndClose(&res)
	return nil
}
 
